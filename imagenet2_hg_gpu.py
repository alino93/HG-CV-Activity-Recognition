# -*- coding: utf-8 -*-
"""ImageNet2_HG_GPU.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jBEzE_x2K-y07i-cwEGVzsGnS_dvDFzT
"""

from __future__ import print_function
from __future__ import division
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import numpy as np
import torchvision
from torchvision import datasets, models, transforms
import matplotlib.pyplot as plt
import time
import os
import copy
import seaborn as sns
from sklearn import metrics
print("PyTorch Version: ",torch.__version__)
print("Torchvision Version: ",torchvision.__version__)

def train_model(model, dataloaders, criterion, optimizer, num_epochs=25):
    # Detect if we have a GPU available
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

    since = time.time()

    val_acc_history = []

    best_model_wts = copy.deepcopy(model.state_dict())
    best_acc = 0.0

    for epoch in range(num_epochs):
        print('Epoch {}/{}'.format(epoch, num_epochs - 1))
        print('-' * 10)

        # Each epoch has a training and validation phase
        for phase in ['train', 'val']:
            if phase == 'train':
                model.train()  # Set model to training mode
            else:
                model.eval()   # Set model to evaluate mode

            running_loss = 0.0
            running_corrects = 0

            # Iterate over data.
            for inputs, labels in dataloaders[phase]:
                inputs = inputs.to(device)
                labels = labels.to(device)

                # zero the parameter gradients
                optimizer.zero_grad()

                # forward
                # track history if only in train
                with torch.set_grad_enabled(phase == 'train'):
                    # Get model outputs and calculate loss
                    # Special case for inception because in training it has an auxiliary output. In train
                    #   mode we calculate the loss by summing the final output and the auxiliary output
                    #   but in testing we only consider the final output.
                    if False and phase == 'train':
                        # From https://discuss.pytorch.org/t/how-to-optimize-inception-model-with-auxiliary-classifiers/7958
                        outputs, aux_outputs = model(inputs)
                        loss1 = criterion(outputs, labels)
                        loss2 = criterion(aux_outputs, labels)
                        loss = loss1 + 0.4*loss2
                    else:
                        outputs = model(inputs)
                        loss = criterion(outputs, labels)

                    _, preds = torch.max(outputs, 1)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                # statistics
                running_loss += loss.item() * inputs.size(0)
                running_corrects += torch.sum(preds == labels.data)

            epoch_loss = running_loss / len(dataloaders[phase].dataset)
            epoch_acc = running_corrects.double() / len(dataloaders[phase].dataset)

            print('{} Loss: {:.4f} Acc: {:.4f}'.format(phase, epoch_loss, epoch_acc))

            # deep copy the model
            if phase == 'val' and epoch_acc > best_acc:
                best_acc = epoch_acc
                best_model_wts = copy.deepcopy(model.state_dict())
            if phase == 'val':
                val_acc_history.append(epoch_acc)

        print()

    time_elapsed = time.time() - since
    print('Training complete in {:.0f}m {:.0f}s'.format(time_elapsed // 60, time_elapsed % 60))
    print('Best val Acc: {:4f}'.format(best_acc))

    # load best model weights
    model.load_state_dict(best_model_wts)
    return model, val_acc_history

def set_parameter_requires_grad(model, feature_extracting):
    if feature_extracting:
        for param in model.parameters():
            param.requires_grad = False

def initialize_model(model_name, num_classes, feature_extract, use_pretrained=True):
    # Initialize these variables which will be set in this if statement. Each of these
    #   variables is model specific.
    model_ft = None
    input_size = 0

    if model_name == "resnet":
        """ Resnet18
        """
        model_ft = models.resnet18(pretrained=use_pretrained)
        set_parameter_requires_grad(model_ft, feature_extract)
        num_ftrs = model_ft.fc.in_features
        model_ft.fc = nn.Linear(num_ftrs, num_classes)
        input_size = 224

    elif model_name == "alexnet":
        """ Alexnet
        """
        model_ft = models.alexnet(pretrained=use_pretrained)
        set_parameter_requires_grad(model_ft, feature_extract)
        num_ftrs = model_ft.classifier[6].in_features
        model_ft.classifier[6] = nn.Linear(num_ftrs,num_classes)
        input_size = 224

    elif model_name == "vgg":
        """ VGG11_bn
        """
        model_ft = models.vgg11_bn(pretrained=use_pretrained)
        set_parameter_requires_grad(model_ft, feature_extract)
        num_ftrs = model_ft.classifier[6].in_features
        model_ft.classifier[6] = nn.Linear(num_ftrs,num_classes)
        input_size = 224

    elif model_name == "squeezenet":
        """ Squeezenet
        """
        model_ft = models.squeezenet1_0(pretrained=use_pretrained)
        set_parameter_requires_grad(model_ft, feature_extract)
        model_ft.classifier[1] = nn.Conv2d(512, num_classes, kernel_size=(1,1), stride=(1,1))
        model_ft.num_classes = num_classes
        input_size = 224

    elif model_name == "densenet":
        """ Densenet
        """
        model_ft = models.densenet121(pretrained=use_pretrained)
        set_parameter_requires_grad(model_ft, feature_extract)
        num_ftrs = model_ft.classifier.in_features
        model_ft.classifier = nn.Linear(num_ftrs, num_classes)
        input_size = 224

    elif model_name == "inception":
        """ Inception v3
        Be careful, expects (299,299) sized images and has auxiliary output
        """
        model_ft = models.inception_v3(pretrained=use_pretrained)
        set_parameter_requires_grad(model_ft, feature_extract)
        # Handle the auxilary net
        num_ftrs = model_ft.AuxLogits.fc.in_features
        model_ft.AuxLogits.fc = nn.Linear(num_ftrs, num_classes)
        # Handle the primary net
        num_ftrs = model_ft.fc.in_features
        model_ft.fc = nn.Linear(num_ftrs,num_classes)
        input_size = 299

    else:
        print("Invalid model name, exiting...")
        exit()

    return model_ft, input_size

def Train(model_name, num_classes, feature_extract, data_dir, batch_size=10, num_epochs=15, use_pretrained=True):

  # Initialize the model for this run
  model_ft, input_size = initialize_model(model_name, num_classes, feature_extract, use_pretrained=True)

  ## Print the model we just instantiated
  print(model_ft)

  # Data augmentation and normalization for training
  # Just normalization for validation
  data_transforms = {
      'train': transforms.Compose([
          #transforms.RandomResizedCrop(input_size),
          #transforms.RandomHorizontalFlip(),
          transforms.ToTensor(),
          #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
      ]),
      'val': transforms.Compose([
          #transforms.Resize(input_size),
          #transforms.CenterCrop(input_size),
          transforms.ToTensor(),
          #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
      ]),
  }

  print("Initializing Datasets and Dataloaders...")

  # Create training and validation datasets
  image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x), data_transforms[x]) for x in ['train', 'val']}

  # Create training and validation dataloaders
  dataloaders_dict = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=batch_size, shuffle=True, num_workers=2) for x in ['train', 'val']}

  # Detect if we have a GPU available
  device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

  # Send the model to GPU
  model_ft = model_ft.to(device)

  # Gather the parameters to be optimized/updated in this run. If we are
  #  finetuning we will be updating all parameters. However, if we are
  #  doing feature extract method, we will only update the parameters
  #  that we have just initialized, i.e. the parameters with requires_grad
  #  is True.
  params_to_update = model_ft.parameters()
  print("Params to learn:")
  if feature_extract:
      params_to_update = []
      for name,param in model_ft.named_parameters():
          if param.requires_grad == True:
              params_to_update.append(param)
              print("\t",name)
  else:
      for name,param in model_ft.named_parameters():
          if param.requires_grad == True:
              print("\t",name)

  # Observe that all parameters are being optimized
  optimizer_ft = optim.SGD(params_to_update, lr=0.001, momentum=0.9)

  # Setup the loss fxn
  criterion = nn.CrossEntropyLoss()

  # Train and evaluate
  model_ft, hist = train_model(model_ft, dataloaders_dict, criterion, optimizer_ft, num_epochs=num_epochs)
  return model_ft

# Prediction and Conf matrix
def get_all_preds(model, data_dir):
    data_transforms = {
    'val': transforms.Compose([
        #transforms.Resize(input_size),
        #transforms.CenterCrop(input_size),
        transforms.ToTensor(),
        transforms.RandomHorizontalFlip(1),
        #transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
    ])}
    image_datasets = datasets.ImageFolder(os.path.join(data_dir, 'val'), data_transforms['val'])
    loader = torch.utils.data.DataLoader(image_datasets, batch_size=30, shuffle=True, num_workers=2)
    model = model.to("cpu")
    model.eval()
    all_preds = torch.tensor([])
    all_labels = torch.tensor([])
    for batch in loader:
        images, labels = batch
        with torch.no_grad():
          preds = model(images)
        all_preds = torch.cat(
            (all_preds, preds)
            ,dim=0
        )
        all_labels = torch.cat(
            (all_labels, labels)
            ,dim=0
        )
        del preds
        torch.cuda.empty_cache()

    all_preds_np = all_preds.cpu().detach().numpy()
    all_labels_np = all_labels.cpu().detach().numpy()
    return all_preds_np, all_labels_np

def plot_conf(Y_pred, Y_label):
  LABELS = ['bend','lie','nfall','sitstand','stand','turn','walk']
  Y_label_int = Y_label#np.argmax(Y_label, axis=1)
  Y_pred_int = np.argmax(Y_pred, axis=1)
  confusion_matrix = metrics.confusion_matrix(Y_label_int, Y_pred_int)
  #confusion_matrix[3,0] = confusion_matrix[3,0]
  plt.figure(figsize=(6, 4))
  sns.heatmap(confusion_matrix, xticklabels=LABELS, yticklabels=LABELS, annot=True, fmt="d",cmap="Blues");
  plt.title("Confusion matrix")
  plt.ylabel('True label')
  plt.xlabel('Predicted label')
  plt.show();

  Acc = np.trace(confusion_matrix) / np.sum(confusion_matrix)
  print('Accuracy: {:.4f}'.format(Acc))

## Train on HG Data w/o feature extraction

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "squeezenet"
num_classes = 7
batch_size = 30
num_epochs = 20
feature_extract = False

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_squeezenet_false")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_squeezenet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)



## Train on HG Data w/o feature extraction

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "alexnet"
num_classes = 7
batch_size = 30
num_epochs = 20
feature_extract = False

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_alexnet_false")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_alexnet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

## Train on HG Data w/o Feature extraact
#   to the ImageFolder structure
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "densenet"
num_classes = 7
batch_size = 30
num_epochs = 13
feature_extract = False

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_densenet_false")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_densenet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

## Train on HG Data w/o Feature extraact
#   to the ImageFolder structure
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "resnet"
num_classes = 7
batch_size = 30
num_epochs = 14
feature_extract = False

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_resnet_false")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_resnet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

## Train on HG Data w/o Feature extraact
#   to the ImageFolder structure
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "vgg"
num_classes = 7
batch_size = 50
num_epochs = 15
feature_extract = False

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_vgg_false")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_vgg_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

## Train on HG Data w Feature extraact
#   to the ImageFolder structure
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "squeezenet"
num_classes = 7
batch_size = 8
num_epochs = 15
feature_extract = True

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_squeezenet_true")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_squeezenet_true")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

## Train on HG Data w Feature extraact
#   to the ImageFolder structure
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "resnet"
num_classes = 7
batch_size = 30
num_epochs = 20
feature_extract = True

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_resnet_true")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_resnet_true")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

## Train on HG Data w Feature extraact
#   to the ImageFolder structure
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "alexnet"
num_classes = 7
batch_size = 30
num_epochs = 20
feature_extract = True

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_alexnet_true")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_alexnet_true")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

## Train on HG Data w Feature extraact
#   to the ImageFolder structure
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "densenet"
num_classes = 7
batch_size = 30
num_epochs = 20
feature_extract = True

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_densenet_true")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_densenet_true")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

## Train on HG Data w Feature extraact
#   to the ImageFolder structure
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "vgg"
num_classes = 7
batch_size = 30
num_epochs = 20
feature_extract = True

model_ft = Train(model_name, num_classes, feature_extract, data_dir, batch_size, num_epochs, use_pretrained=True)

torch.save(model_ft, "drive/MyDrive/Thesis/Codes/ImageNet/HG_vgg_true")
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_vgg_true")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

### CHECK ON NEW PATIENT

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHGTest"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_resnet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

### CHECK ON NEW PATIENT

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHGTest"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_alexnet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

### CHECK ON NEW PATIENT

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHGTest"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model_name = "vgg"

model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_vgg_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

### CHECK ON NEW PATIENT

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHGTest"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_densenet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

### CHECK ON NEW PATIENT

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHGTest"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_squeezenet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

### CHECK ON Flipped image on NEW PATIENT

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_resnet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

### CHECK ON Flipped image

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_alexnet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

### CHECK ON Sequence

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

# Models to choose from [resnet, alexnet, vgg, squeezenet, densenet, inception]
model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_alexnet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/HG_alexnet_false")
# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataHG"

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)

# Data directory
data_dir = "drive/MyDrive/Thesis/Codes/ImageNet/dataAcc3"

model = torch.load("drive/MyDrive/Thesis/Codes/ImageNet/acc3_alexnet_false")

Y_pred, Y_label  = get_all_preds(model,data_dir)
plot_conf(Y_pred, Y_label)